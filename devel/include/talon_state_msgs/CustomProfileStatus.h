// Generated by gencpp from file talon_state_msgs/CustomProfileStatus.msg
// DO NOT EDIT!


#ifndef TALON_STATE_MSGS_MESSAGE_CUSTOMPROFILESTATUS_H
#define TALON_STATE_MSGS_MESSAGE_CUSTOMPROFILESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace talon_state_msgs
{
template <class ContainerAllocator>
struct CustomProfileStatus_
{
  typedef CustomProfileStatus_<ContainerAllocator> Type;

  CustomProfileStatus_()
    : running(false)
    , slotRunning(0)
    , remainingPoints()
    , remainingTime(0.0)
    , outOfPoints(false)  {
    }
  CustomProfileStatus_(const ContainerAllocator& _alloc)
    : running(false)
    , slotRunning(0)
    , remainingPoints(_alloc)
    , remainingTime(0.0)
    , outOfPoints(false)  {
  (void)_alloc;
    }



   typedef uint8_t _running_type;
  _running_type running;

   typedef int32_t _slotRunning_type;
  _slotRunning_type slotRunning;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _remainingPoints_type;
  _remainingPoints_type remainingPoints;

   typedef double _remainingTime_type;
  _remainingTime_type remainingTime;

   typedef uint8_t _outOfPoints_type;
  _outOfPoints_type outOfPoints;





  typedef boost::shared_ptr< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CustomProfileStatus_

typedef ::talon_state_msgs::CustomProfileStatus_<std::allocator<void> > CustomProfileStatus;

typedef boost::shared_ptr< ::talon_state_msgs::CustomProfileStatus > CustomProfileStatusPtr;
typedef boost::shared_ptr< ::talon_state_msgs::CustomProfileStatus const> CustomProfileStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator1> & lhs, const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator2> & rhs)
{
  return lhs.running == rhs.running &&
    lhs.slotRunning == rhs.slotRunning &&
    lhs.remainingPoints == rhs.remainingPoints &&
    lhs.remainingTime == rhs.remainingTime &&
    lhs.outOfPoints == rhs.outOfPoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator1> & lhs, const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace talon_state_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88d6d29a2f14590c2629fee009ce5b24";
  }

  static const char* value(const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88d6d29a2f14590cULL;
  static const uint64_t static_value2 = 0x2629fee009ce5b24ULL;
};

template<class ContainerAllocator>
struct DataType< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "talon_state_msgs/CustomProfileStatus";
  }

  static const char* value(const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool running\n"
"int32 slotRunning\n"
"int32[] remainingPoints\n"
"float64 remainingTime\n"
"bool outOfPoints\n"
;
  }

  static const char* value(const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.running);
      stream.next(m.slotRunning);
      stream.next(m.remainingPoints);
      stream.next(m.remainingTime);
      stream.next(m.outOfPoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomProfileStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::talon_state_msgs::CustomProfileStatus_<ContainerAllocator>& v)
  {
    s << indent << "running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running);
    s << indent << "slotRunning: ";
    Printer<int32_t>::stream(s, indent + "  ", v.slotRunning);
    s << indent << "remainingPoints[]" << std::endl;
    for (size_t i = 0; i < v.remainingPoints.size(); ++i)
    {
      s << indent << "  remainingPoints[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.remainingPoints[i]);
    }
    s << indent << "remainingTime: ";
    Printer<double>::stream(s, indent + "  ", v.remainingTime);
    s << indent << "outOfPoints: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.outOfPoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TALON_STATE_MSGS_MESSAGE_CUSTOMPROFILESTATUS_H
