// Generated by gencpp from file talon_swerve_drive_controller/MotionProfileRequest.msg
// DO NOT EDIT!


#ifndef TALON_SWERVE_DRIVE_CONTROLLER_MESSAGE_MOTIONPROFILEREQUEST_H
#define TALON_SWERVE_DRIVE_CONTROLLER_MESSAGE_MOTIONPROFILEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectory.h>

namespace talon_swerve_drive_controller
{
template <class ContainerAllocator>
struct MotionProfileRequest_
{
  typedef MotionProfileRequest_<ContainerAllocator> Type;

  MotionProfileRequest_()
    : joint_trajectory()
    , hold()
    , dt(0.0)
    , slot(0)
    , wipe_all(false)
    , buffer(false)
    , run(false)
    , brake(false)
    , mode(false)
    , run_slot(0)
    , change_queue(false)
    , new_queue()  {
    }
  MotionProfileRequest_(const ContainerAllocator& _alloc)
    : joint_trajectory(_alloc)
    , hold(_alloc)
    , dt(0.0)
    , slot(0)
    , wipe_all(false)
    , buffer(false)
    , run(false)
    , brake(false)
    , mode(false)
    , run_slot(0)
    , change_queue(false)
    , new_queue(_alloc)  {
  (void)_alloc;
    }



   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _joint_trajectory_type;
  _joint_trajectory_type joint_trajectory;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _hold_type;
  _hold_type hold;

   typedef double _dt_type;
  _dt_type dt;

   typedef uint32_t _slot_type;
  _slot_type slot;

   typedef uint8_t _wipe_all_type;
  _wipe_all_type wipe_all;

   typedef uint8_t _buffer_type;
  _buffer_type buffer;

   typedef uint8_t _run_type;
  _run_type run;

   typedef uint8_t _brake_type;
  _brake_type brake;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _run_slot_type;
  _run_slot_type run_slot;

   typedef uint8_t _change_queue_type;
  _change_queue_type change_queue;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _new_queue_type;
  _new_queue_type new_queue;





  typedef boost::shared_ptr< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotionProfileRequest_

typedef ::talon_swerve_drive_controller::MotionProfileRequest_<std::allocator<void> > MotionProfileRequest;

typedef boost::shared_ptr< ::talon_swerve_drive_controller::MotionProfileRequest > MotionProfileRequestPtr;
typedef boost::shared_ptr< ::talon_swerve_drive_controller::MotionProfileRequest const> MotionProfileRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator1> & lhs, const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_trajectory == rhs.joint_trajectory &&
    lhs.hold == rhs.hold &&
    lhs.dt == rhs.dt &&
    lhs.slot == rhs.slot &&
    lhs.wipe_all == rhs.wipe_all &&
    lhs.buffer == rhs.buffer &&
    lhs.run == rhs.run &&
    lhs.brake == rhs.brake &&
    lhs.mode == rhs.mode &&
    lhs.run_slot == rhs.run_slot &&
    lhs.change_queue == rhs.change_queue &&
    lhs.new_queue == rhs.new_queue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator1> & lhs, const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace talon_swerve_drive_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "823f7df5a442d751c5c3d88388259334";
  }

  static const char* value(const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x823f7df5a442d751ULL;
  static const uint64_t static_value2 = 0xc5c3d88388259334ULL;
};

template<class ContainerAllocator>
struct DataType< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "talon_swerve_drive_controller/MotionProfileRequest";
  }

  static const char* value(const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_msgs/JointTrajectory joint_trajectory\n"
"bool[]  hold\n"
"float64 dt\n"
"uint32  slot\n"
"bool    wipe_all\n"
"bool    buffer\n"
"bool    run\n"
"bool    brake\n"
"bool    mode\n"
"uint8   run_slot\n"
"bool    change_queue\n"
"uint8[] new_queue\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_trajectory);
      stream.next(m.hold);
      stream.next(m.dt);
      stream.next(m.slot);
      stream.next(m.wipe_all);
      stream.next(m.buffer);
      stream.next(m.run);
      stream.next(m.brake);
      stream.next(m.mode);
      stream.next(m.run_slot);
      stream.next(m.change_queue);
      stream.next(m.new_queue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionProfileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::talon_swerve_drive_controller::MotionProfileRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_trajectory);
    s << indent << "hold[]" << std::endl;
    for (size_t i = 0; i < v.hold.size(); ++i)
    {
      s << indent << "  hold[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.hold[i]);
    }
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "slot: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.slot);
    s << indent << "wipe_all: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wipe_all);
    s << indent << "buffer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.buffer);
    s << indent << "run: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "run_slot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run_slot);
    s << indent << "change_queue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.change_queue);
    s << indent << "new_queue[]" << std::endl;
    for (size_t i = 0; i < v.new_queue.size(); ++i)
    {
      s << indent << "  new_queue[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.new_queue[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TALON_SWERVE_DRIVE_CONTROLLER_MESSAGE_MOTIONPROFILEREQUEST_H
