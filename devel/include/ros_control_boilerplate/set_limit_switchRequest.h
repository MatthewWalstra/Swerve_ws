// Generated by gencpp from file ros_control_boilerplate/set_limit_switchRequest.msg
// DO NOT EDIT!


#ifndef ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H
#define ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_control_boilerplate
{
template <class ContainerAllocator>
struct set_limit_switchRequest_
{
  typedef set_limit_switchRequest_<ContainerAllocator> Type;

  set_limit_switchRequest_()
    : target_joint_id(0)
    , target_joint_name()
    , forward(false)
    , reverse(false)  {
    }
  set_limit_switchRequest_(const ContainerAllocator& _alloc)
    : target_joint_id(0)
    , target_joint_name(_alloc)
    , forward(false)
    , reverse(false)  {
  (void)_alloc;
    }



   typedef uint8_t _target_joint_id_type;
  _target_joint_id_type target_joint_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_joint_name_type;
  _target_joint_name_type target_joint_name;

   typedef uint8_t _forward_type;
  _forward_type forward;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;





  typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_limit_switchRequest_

typedef ::ros_control_boilerplate::set_limit_switchRequest_<std::allocator<void> > set_limit_switchRequest;

typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest > set_limit_switchRequestPtr;
typedef boost::shared_ptr< ::ros_control_boilerplate::set_limit_switchRequest const> set_limit_switchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator1> & lhs, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_joint_id == rhs.target_joint_id &&
    lhs.target_joint_name == rhs.target_joint_name &&
    lhs.forward == rhs.forward &&
    lhs.reverse == rhs.reverse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator1> & lhs, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_control_boilerplate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aea7656fc087d7bb28bae4c37dc4edcd";
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaea7656fc087d7bbULL;
  static const uint64_t static_value2 = 0x28bae4c37dc4edcdULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_control_boilerplate/set_limit_switchRequest";
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 target_joint_id\n"
"string target_joint_name\n"
"bool forward\n"
"bool reverse\n"
;
  }

  static const char* value(const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_joint_id);
      stream.next(m.target_joint_name);
      stream.next(m.forward);
      stream.next(m.reverse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_limit_switchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_control_boilerplate::set_limit_switchRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_joint_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_joint_id);
    s << indent << "target_joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_joint_name);
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_CONTROL_BOILERPLATE_MESSAGE_SET_LIMIT_SWITCHREQUEST_H
