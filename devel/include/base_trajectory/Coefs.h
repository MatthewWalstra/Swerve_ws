// Generated by gencpp from file base_trajectory/Coefs.msg
// DO NOT EDIT!


#ifndef BASE_TRAJECTORY_MESSAGE_COEFS_H
#define BASE_TRAJECTORY_MESSAGE_COEFS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_trajectory
{
template <class ContainerAllocator>
struct Coefs_
{
  typedef Coefs_<ContainerAllocator> Type;

  Coefs_()
    : spline()  {
    }
  Coefs_(const ContainerAllocator& _alloc)
    : spline(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _spline_type;
  _spline_type spline;





  typedef boost::shared_ptr< ::base_trajectory::Coefs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_trajectory::Coefs_<ContainerAllocator> const> ConstPtr;

}; // struct Coefs_

typedef ::base_trajectory::Coefs_<std::allocator<void> > Coefs;

typedef boost::shared_ptr< ::base_trajectory::Coefs > CoefsPtr;
typedef boost::shared_ptr< ::base_trajectory::Coefs const> CoefsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_trajectory::Coefs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_trajectory::Coefs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::base_trajectory::Coefs_<ContainerAllocator1> & lhs, const ::base_trajectory::Coefs_<ContainerAllocator2> & rhs)
{
  return lhs.spline == rhs.spline;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::base_trajectory::Coefs_<ContainerAllocator1> & lhs, const ::base_trajectory::Coefs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace base_trajectory

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::base_trajectory::Coefs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_trajectory::Coefs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_trajectory::Coefs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_trajectory::Coefs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_trajectory::Coefs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_trajectory::Coefs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_trajectory::Coefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "369e2ee5470491d0958d361c6498cf95";
  }

  static const char* value(const ::base_trajectory::Coefs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x369e2ee5470491d0ULL;
  static const uint64_t static_value2 = 0x958d361c6498cf95ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_trajectory::Coefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_trajectory/Coefs";
  }

  static const char* value(const ::base_trajectory::Coefs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_trajectory::Coefs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] spline\n"
;
  }

  static const char* value(const ::base_trajectory::Coefs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_trajectory::Coefs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.spline);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coefs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_trajectory::Coefs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_trajectory::Coefs_<ContainerAllocator>& v)
  {
    s << indent << "spline[]" << std::endl;
    for (size_t i = 0; i < v.spline.size(); ++i)
    {
      s << indent << "  spline[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.spline[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_TRAJECTORY_MESSAGE_COEFS_H
