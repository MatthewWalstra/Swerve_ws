// Generated by gencpp from file base_trajectory/GenerateSplineRequest.msg
// DO NOT EDIT!


#ifndef BASE_TRAJECTORY_MESSAGE_GENERATESPLINEREQUEST_H
#define BASE_TRAJECTORY_MESSAGE_GENERATESPLINEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectoryPoint.h>

namespace base_trajectory
{
template <class ContainerAllocator>
struct GenerateSplineRequest_
{
  typedef GenerateSplineRequest_<ContainerAllocator> Type;

  GenerateSplineRequest_()
    : points()  {
    }
  GenerateSplineRequest_(const ContainerAllocator& _alloc)
    : points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateSplineRequest_

typedef ::base_trajectory::GenerateSplineRequest_<std::allocator<void> > GenerateSplineRequest;

typedef boost::shared_ptr< ::base_trajectory::GenerateSplineRequest > GenerateSplineRequestPtr;
typedef boost::shared_ptr< ::base_trajectory::GenerateSplineRequest const> GenerateSplineRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator1> & lhs, const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator1> & lhs, const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace base_trajectory

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbcffe0108b8e28a6a17e35f91e89d9f";
  }

  static const char* value(const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbcffe0108b8e28aULL;
  static const uint64_t static_value2 = 0x6a17e35f91e89d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_trajectory/GenerateSplineRequest";
  }

  static const char* value(const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_msgs/JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateSplineRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_trajectory::GenerateSplineRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_trajectory::GenerateSplineRequest_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_TRAJECTORY_MESSAGE_GENERATESPLINEREQUEST_H
