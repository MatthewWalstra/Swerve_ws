// Generated by gencpp from file talon_controllers/PidfSlotRequest.msg
// DO NOT EDIT!


#ifndef TALON_CONTROLLERS_MESSAGE_PIDFSLOTREQUEST_H
#define TALON_CONTROLLERS_MESSAGE_PIDFSLOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace talon_controllers
{
template <class ContainerAllocator>
struct PidfSlotRequest_
{
  typedef PidfSlotRequest_<ContainerAllocator> Type;

  PidfSlotRequest_()
    : pidf_slot(0)  {
    }
  PidfSlotRequest_(const ContainerAllocator& _alloc)
    : pidf_slot(0)  {
  (void)_alloc;
    }



   typedef int32_t _pidf_slot_type;
  _pidf_slot_type pidf_slot;





  typedef boost::shared_ptr< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PidfSlotRequest_

typedef ::talon_controllers::PidfSlotRequest_<std::allocator<void> > PidfSlotRequest;

typedef boost::shared_ptr< ::talon_controllers::PidfSlotRequest > PidfSlotRequestPtr;
typedef boost::shared_ptr< ::talon_controllers::PidfSlotRequest const> PidfSlotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::talon_controllers::PidfSlotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::talon_controllers::PidfSlotRequest_<ContainerAllocator1> & lhs, const ::talon_controllers::PidfSlotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pidf_slot == rhs.pidf_slot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::talon_controllers::PidfSlotRequest_<ContainerAllocator1> & lhs, const ::talon_controllers::PidfSlotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace talon_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "699888169b1a41d28b65c42d5f593b44";
  }

  static const char* value(const ::talon_controllers::PidfSlotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x699888169b1a41d2ULL;
  static const uint64_t static_value2 = 0x8b65c42d5f593b44ULL;
};

template<class ContainerAllocator>
struct DataType< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "talon_controllers/PidfSlotRequest";
  }

  static const char* value(const ::talon_controllers::PidfSlotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pidf_slot\n"
;
  }

  static const char* value(const ::talon_controllers::PidfSlotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pidf_slot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PidfSlotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::talon_controllers::PidfSlotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::talon_controllers::PidfSlotRequest_<ContainerAllocator>& v)
  {
    s << indent << "pidf_slot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pidf_slot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TALON_CONTROLLERS_MESSAGE_PIDFSLOTREQUEST_H
